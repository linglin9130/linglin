DLT_simulation<-function(type,set,trial=10000,theta_0=0.2,u_alpha=1.2,u_ng=1,c_min=10, c_max=50, del_0=0.05, r1=0.5,r2=0.95){
  if(type < 1 |type > 3 | type %% 1!=0 | set<1 | set>5| set%% 1!=0 | trial<1 | trial %% 1!=0 | theta_0<0 | theta_0>1 | u_alpha<=0 |u_ng<=0 | c_min %% 1!=0| c_min<1 |c_max%% 1!=0 | c_max<1 |del_0<0 |r1<0 | r1>1 |r2<0 | r2>1  ) stop("input argument is not valid")
  
  # scenario a b c
  a_se<-(matrix(c(seq(4,16,by=4),seq(10,22,by=4),seq(16,28,by=4),seq(22,34,by=4)),nrow=4)/100)
  b_se<-(matrix(c(seq(2,8,by=2),seq(5,11,by=2),seq(8,14,by=2),seq(11,17,by=2)),nrow=4)/100)
  c_se<-(matrix(c(seq(10,40,by=10),seq(25,55,by=10),seq(40,70,by=10),seq(55,85,by=10)),nrow=4)/100)
  # decide scenario
  p<-matrix()
  if (type == 1) {p<-a_se} else{if (type==2) {p<-b_se} else{p<-c_se}}
  
  # for result
  t_final<-matrix(rep(0,16),nrow=4)
  no_rec.total<-0
  count.total<-0
  
  # simulations
  for(t in 1: trial){
    # different set for diff parameters
    p_m<-matrix(rep(0,16),nrow=4)
    for(i in 1:4){
      for(j in 1:4){
        if(set==3){
          p_m[i,j]<-p[i,j]-runif(1,0.01,0.05)
          if(p_m[i,j]<0.01) p_m[i,j]<-0.01}else{
            if(set==4){p_m[i,j]<-p[i,j]+runif(1,0.01,0.05)}else{
              if(set==5){
                if(rbinom(1,1,0.5)==0){
                  p_m[i,j]<-p[i,j]-runif(1,0.01,0.05)
                  if(p_m[i,j]<0.01) p_m[i,j]<-0.01}else{
                    p_m[i,j]<-p[i,j]+runif(1,0.01,0.05)}}else{
                      p_m[i,j]<-p[i,j]}}}}}
    
    #parameters for beta
    pa_a<-4*p_m
    pa_b<-4*(1-p_m)
    
    # starting position
    c_new<-1
    r_new<-1
    # counter
    count<-0
    toxic<-0
    no_rec<-0
    
    # 1st part
    #decide the path for first six,  ==0 go down, ==1 go right-- discussed with Kim
    path<-sample(c(0,0,0,1,1,1))
    
    while (rbinom(1,1,p[r_new,c_new])==0) {
      count<-count+1
      if(count==7) {break}
      if(path[count]==0){r_new<-r_new+1} else{
        c_new<-c_new+1}}
    
    # 2nd part
    if(count==7){
      #new parameter matrix
      for(i in 1:4){
        for(j in 1:4){
          if(i==r_new & j==c_new){pa_b[i,j]<-pa_b[i,j]+count} else{
            if( (i <= r_new & j <= c_new) & (i+j)< (r_new+c_new)){pa_b[i,j]<-pa_b[i,j]+count} else{
              pa_b[i,j]<-pa_b[i,j]}}}}}else{
                #new parameter matrix
                count<-count+1
                toxic<-toxic+1
                for(i in 1:4){
                  for(j in 1:4){
                    if(i==r_new & j==c_new){
                      pa_a[i,j]<-pa_a[i,j]+toxic
                      pa_b[i,j]<-pa_b[i,j]+count-toxic} else{
                        if( (i >= r_new & j >= c_new) & (i+j)>(r_new+c_new)){
                          pa_a[i,j]<-pa_a[i,j]+toxic
                          pa_b[i,j]<-pa_b[i,j]}else{
                            if( (i <= r_new & j <= c_new) & (i+j)< (r_new+c_new)){
                              pa_a[i,j]<-pa_a[i,j]
                              pa_b[i,j]<-pa_b[i,j]+count-toxic}else{
                                pa_a[i,j]<-pa_a[i,j]
                                pa_b[i,j]<-pa_b[i,j]}}}}}}
    
    # find utilities
    u<-matrix()
    u<-((-(u_alpha+u_ng))*(theta_0*pbeta(theta_0,pa_a,pa_b)-(pa_a/(pa_a+pa_b))*pbeta(theta_0,pa_a+1,pa_b)))-u_ng*((pa_a/(pa_a+pa_b))-theta_0)
    
    # non-skipping
    if(set==2){
      for (i in 1:4){
        for(j in 1:4){
          if (i>=r_new+2 | j>=c_new+2){u[i,j]==(-9999)} else{
            if (i==r_new+1 & j>=c_new+1){u[i,j]==(-9999)}}}}}
    
    # find the one with greatest utility
    if (which(u==max(u))%%4 ==0){
      r_new<-4
      c_new<-which(u==max(u))/4
    } else{
      r_new<-which(u==max(u))%%4
      c_new<-which(u==max(u))%/%4+1
    }
    
    #start to repeat
    repeat{
      if(rbinom(1,1,p[r_new,c_new])==0){
        count<-count+1
        #new parameter matrix
        for(i in 1:4){
          for(j in 1:4){
            if(i==r_new & j==c_new){pa_b[i,j]<-pa_b[i,j]+1} else{
              if((i <= r_new & j <= c_new) & (i+j)< (r_new+c_new)){pa_b[i,j]<-pa_b[i,j]+1} else{
                pa_b[i,j]<-pa_b[i,j]}}}}
      } else{
        count<-count+1
        toxic<-toxic+1
        for(i in 1:4){
          for(j in 1:4){
            if(i==r_new & j==c_new){pa_a[i,j]<-pa_a[i,j]+1} else{
              if((i >= r_new & j >= c_new) & (i+j)>(r_new+c_new)){pa_a[i,j]<-pa_a[i,j]+1}else{
                pa_a[i,j]<-pa_a[i,j]}}}}}
      #S2
      if (count==c_max) {
        t_final[r_new,c_new]<-t_final[r_new,c_new]+1
        count.total<-count.total+count
        break
      }
      
      # find utilities
      u<-(-(u_alpha+u_ng)*(theta_0*pbeta(theta_0,pa_a,pa_b)-(pa_a/(pa_a+pa_b))*pbeta(theta_0,pa_a+1,pa_b))-u_ng*((pa_a/(pa_a+pa_b))-theta_0))
      
      # non-skipping
      if(set==2){
        for (i in 1:4){
          for(j in 1:4){
            if (i>=r_new+2 | j>=c_new+2){u[i,j]==(-9999)} else{
              if (i==r_new+1 & j>=c_new+1){u[i,j]==(-9999)}}}}}
      
      # find the one with greatest utility
      if (which(u==max(u))%%4==0){
        r_new<-4
        c_new<-which(u==max(u))/4
      } else{
        r_new<-which(u==max(u))%%4
        c_new<-which(u==max(u))%/%4+1
      }
      
      # S3
      if(count>=c_min & (1-pbeta(theta_0+del_0,pa_a[1,1],pa_b[1,1]))>r1) {
        no_rec.total<-no_rec.total+1
        count.total<-count.total+count
        break
      }
      # S4-1
      if((count>=c_min & (r_new==c_new & r_new==4)) & (1-pbeta(theta_0+del_0,pa_a[r_new,c_new],pa_b[r_new,c_new]))>r2){
        t_final[r_new,c_new]<-t_final[r_new,c_new]+1
        count.total<-count.total+count
        break
      }
      # S4-2
      S4_a<-matrix(rep(10,16),nrow=4); S4_b<-matrix(rep(10,16),nrow=4)
      for(i in 1:4){
        for(j in 1:4){
          if( ( i >= r_new & j >= c_new) & (i+j)>(r_new+c_new)){S4_a[i,j]<-pa_a[i,j];S4_b[i,j]<-pa_b[i,j]}}}
      
      if((count>=c_min & (r_new!=4 | c_new!=4)) & min(1-pbeta(theta_0+del_0,S4_a,S4_b))>r2){
        t_final[r_new,c_new]<-t_final[r_new,c_new]+1
        count.total<-count.total+count
        break}
    }
  }
  
  # final results
  sum_target<-round(sum(t_final*(abs(p*100-20)==0))/100,0)
  sum_within5<-round(sum(t_final*(abs(p*100-20)<=5 & abs(p*100-20)!=0))/100,0)
  sum_5_10<-round(sum(t_final*(abs(p*100-20)>5 & abs(p*100-20)<=10))/100,0)
  sum_more10<-round(sum(t_final*(abs(p*100-20)>10))/100,0)
  
  # final list
  output<-list(sum_target,sum_within5,sum_5_10,sum_more10, round(no_rec.total/100,0), round(count.total/10000,0))
  names(output)<-c("Percentage of recommendation_At target","Percentage of recommendation_1-5 pts of target","Percentage of recommendation_6-10 pts of target","Percentage of recommendation_< or > 10pts of target","Percentage of recommendation_None recommended","Average sample size")
  return(output)
}
